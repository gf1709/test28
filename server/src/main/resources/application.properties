spring.application.name=test28

# Use an in-memory H2 database so Hikari can find a JDBC driver during tests
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=pwd

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# The following property controls schema generation; 'create-drop' means the schema is created at startup and dropped at shutdown (useful for demos/tests)
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true
# Hibernate naming strategy examples:
# 1) Use Spring's improved implicit/physical naming strategy which maps camelCase to snake_case
#    This will map entity field `firstName` -> column `first_name` and entity `Employee` -> table `employee`.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# 2) If you prefer Hibernate's default behavior (no automatic snake_case), comment the line above.
# 3) You can also provide your own implementation of PhysicalNamingStrategy (example provided in the repo):
#spring.jpa.hibernate.naming.physical-strategy=com.test28.server.repo.CustomPhysicalNamingStrategy

# Example: keep the following commented if you want to test a custom strategy instead of SpringPhysicalNamingStrategy

spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql

# Enable logging to console
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
logging.level.org.h2=DEBUG

# Enable H2 console (optional)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

